{"ast":null,"code":"// AlphaUserSystem.js - FIXED: Real Alpha Tester Registration & Collection Management\nclass AlphaUserSystem {\n  constructor() {\n    this.maxAlphaUsers = 500;\n    this.initializeSystem();\n  }\n  initializeSystem() {\n    console.log('üîß AlphaUserSystem initialized');\n\n    // Initialize alpha users array if not exists\n    if (!localStorage.getItem('alpha_users')) {\n      localStorage.setItem('alpha_users', JSON.stringify([]));\n    }\n\n    // Initialize current user if not exists\n    if (!localStorage.getItem('current_alpha_user')) {\n      this.registerNewUser();\n    }\n  }\n\n  // üéØ REGISTER NEW ALPHA TESTER\n  registerNewUser() {\n    const users = this.getAlphaUsers();\n\n    // Check if we're at capacity\n    if (users.length >= this.maxAlphaUsers) {\n      console.warn('‚ö†Ô∏è Alpha testing at capacity');\n      return {\n        success: false,\n        message: 'Alpha testing is currently at capacity (500/500 testers)',\n        userNumber: null\n      };\n    }\n\n    // Generate unique alpha tester number\n    const userNumber = users.length + 1;\n    const userId = `alpha_${userNumber}`;\n\n    // Create new alpha user\n    const newUser = {\n      id: userId,\n      alphaNumber: userNumber,\n      username: this.generateUsername(),\n      registeredAt: new Date().toISOString(),\n      totalScans: 0,\n      successfulScans: 0,\n      // NEW: Track only successful scans\n      lastActive: new Date().toISOString(),\n      feedback: [],\n      collection: [],\n      preferences: {\n        scanMode: 'auto',\n        notifications: true\n      }\n    };\n\n    // Add to users array\n    users.push(newUser);\n    localStorage.setItem('alpha_users', JSON.stringify(users));\n\n    // Set as current user\n    localStorage.setItem('current_alpha_user', JSON.stringify(newUser));\n    console.log(`üéâ Registered Alpha Tester #${userNumber}: ${newUser.username}`);\n    return {\n      success: true,\n      user: newUser,\n      userNumber: userNumber,\n      message: `Welcome Alpha Tester #${userNumber}!`\n    };\n  }\n\n  // üéÆ GET CURRENT USER\n  getCurrentUser() {\n    const userData = localStorage.getItem('current_alpha_user');\n    if (!userData) {\n      return this.registerNewUser().user;\n    }\n    try {\n      const user = JSON.parse(userData);\n\n      // Update last active ONLY (don't trigger scan counter)\n      user.lastActive = new Date().toISOString();\n      localStorage.setItem('current_alpha_user', JSON.stringify(user));\n      return user;\n    } catch (error) {\n      console.error('‚ùå Error loading user data:', error);\n      return this.registerNewUser().user;\n    }\n  }\n\n  // üéØ FIXED: Update stats ONLY for successful scans\n  recordSuccessfulScan(cardName, confidence, scanMode) {\n    const user = this.getCurrentUser();\n    if (!user || !cardName) {\n      console.warn('‚ö†Ô∏è Cannot record scan: invalid user or card name');\n      return user;\n    }\n    console.log(`üìä Recording successful scan: ${cardName} (${confidence}%)`);\n\n    // FIXED: Only increment on actual successful scans\n    user.totalScans += 1;\n    user.successfulScans += 1;\n    user.lastActive = new Date().toISOString();\n\n    // Add to collection or update count\n    this.addToCollection(user, cardName, confidence, scanMode);\n\n    // Update in localStorage\n    localStorage.setItem('current_alpha_user', JSON.stringify(user));\n\n    // Update in users array\n    this.updateUserInArray(user);\n    console.log(`‚úÖ Scan recorded. Total: ${user.totalScans}, Collection: ${user.collection.length} unique cards`);\n    return user;\n  }\n\n  // üóÉÔ∏è COLLECTION MANAGEMENT\n  addToCollection(user, cardName, confidence, scanMode) {\n    const existingCard = user.collection.find(card => card.name.toLowerCase() === cardName.toLowerCase());\n    if (existingCard) {\n      existingCard.count += 1;\n      existingCard.lastScanned = new Date().toISOString();\n      existingCard.totalConfidence += confidence;\n      existingCard.avgConfidence = Math.round(existingCard.totalConfidence / existingCard.count);\n      console.log(`üìà Updated existing card: ${cardName} (now ${existingCard.count}x)`);\n    } else {\n      user.collection.push({\n        id: Date.now(),\n        name: cardName,\n        count: 1,\n        avgConfidence: confidence,\n        totalConfidence: confidence,\n        scanMode: scanMode,\n        firstScanned: new Date().toISOString(),\n        lastScanned: new Date().toISOString()\n      });\n      console.log(`‚ú® Added new card to collection: ${cardName}`);\n    }\n  }\n\n  // üóëÔ∏è REMOVE CARD FROM COLLECTION\n  removeFromCollection(cardId) {\n    const user = this.getCurrentUser();\n    if (!user) return null;\n    const cardIndex = user.collection.findIndex(card => card.id === cardId);\n    if (cardIndex === -1) {\n      console.warn('‚ö†Ô∏è Card not found in collection');\n      return user;\n    }\n    const removedCard = user.collection[cardIndex];\n    user.collection.splice(cardIndex, 1);\n\n    // Update localStorage\n    localStorage.setItem('current_alpha_user', JSON.stringify(user));\n    this.updateUserInArray(user);\n    console.log(`üóëÔ∏è Removed card from collection: ${removedCard.name}`);\n    return user;\n  }\n\n  // üìù UPDATE CARD COUNT\n  updateCardCount(cardId, newCount) {\n    const user = this.getCurrentUser();\n    if (!user) return null;\n    const card = user.collection.find(c => c.id === cardId);\n    if (!card) {\n      console.warn('‚ö†Ô∏è Card not found in collection');\n      return user;\n    }\n    if (newCount <= 0) {\n      return this.removeFromCollection(cardId);\n    }\n    card.count = newCount;\n    card.lastScanned = new Date().toISOString();\n\n    // Update localStorage\n    localStorage.setItem('current_alpha_user', JSON.stringify(user));\n    this.updateUserInArray(user);\n    console.log(`üìù Updated card count: ${card.name} = ${newCount}x`);\n    return user;\n  }\n\n  // üîÑ GET COLLECTION WITH SORTING\n  getCollection(sortBy = 'lastScanned') {\n    const user = this.getCurrentUser();\n    if (!user || !user.collection) return [];\n    const collection = [...user.collection];\n    switch (sortBy) {\n      case 'name':\n        return collection.sort((a, b) => a.name.localeCompare(b.name));\n      case 'count':\n        return collection.sort((a, b) => b.count - a.count);\n      case 'confidence':\n        return collection.sort((a, b) => b.avgConfidence - a.avgConfidence);\n      case 'firstScanned':\n        return collection.sort((a, b) => new Date(a.firstScanned) - new Date(b.firstScanned));\n      case 'lastScanned':\n      default:\n        return collection.sort((a, b) => new Date(b.lastScanned) - new Date(a.lastScanned));\n    }\n  }\n\n  // üîÑ UPDATE USER IN ARRAY\n  updateUserInArray(user) {\n    const users = this.getAlphaUsers();\n    const userIndex = users.findIndex(u => u.id === user.id);\n    if (userIndex !== -1) {\n      users[userIndex] = user;\n      localStorage.setItem('alpha_users', JSON.stringify(users));\n    }\n  }\n\n  // üí¨ ADD USER FEEDBACK\n  addFeedback(rating, comment, context = {}) {\n    const user = this.getCurrentUser();\n    if (!user) return;\n    const feedback = {\n      id: Date.now(),\n      rating: rating,\n      comment: comment,\n      timestamp: new Date().toISOString(),\n      context: context,\n      userNumber: user.alphaNumber,\n      scanCount: user.totalScans\n    };\n    user.feedback.push(feedback);\n    localStorage.setItem('current_alpha_user', JSON.stringify(user));\n\n    // Also save to global feedback array\n    const allFeedback = JSON.parse(localStorage.getItem('alpha_feedback') || '[]');\n    allFeedback.push({\n      ...feedback,\n      userHash: this.hashUserId(user.id),\n      email: user.email || 'not_provided'\n    });\n    localStorage.setItem('alpha_feedback', JSON.stringify(allFeedback));\n    console.log(`üí¨ Feedback added: ${rating}/5 stars`);\n    return feedback;\n  }\n\n  // üé≤ GENERATE UNIQUE USERNAME\n  generateUsername() {\n    const adjectives = ['swift', 'clever', 'brave', 'wise', 'keen', 'bold', 'quick', 'sharp', 'bright', 'fierce', 'mighty', 'noble', 'agile', 'crafty', 'steady'];\n    const mtgTerms = ['mage', 'wizard', 'planeswalker', 'scholar', 'seeker', 'guardian', 'champion', 'explorer', 'mystic', 'artificer', 'summoner', 'spellcaster', 'wanderer', 'collector', 'strategist'];\n    const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n    const term = mtgTerms[Math.floor(Math.random() * mtgTerms.length)];\n    const number = Math.floor(Math.random() * 999) + 1;\n    return `${adjective}${term}${number}`;\n  }\n\n  // üóÉÔ∏è HELPER FUNCTIONS\n  getAlphaUsers() {\n    try {\n      return JSON.parse(localStorage.getItem('alpha_users') || '[]');\n    } catch (error) {\n      console.error('‚ùå Error loading alpha users:', error);\n      return [];\n    }\n  }\n  getAllStats() {\n    const users = this.getAlphaUsers();\n    const currentUser = this.getCurrentUser();\n    return {\n      totalUsers: users.length,\n      maxUsers: this.maxAlphaUsers,\n      currentUser: currentUser,\n      spotsRemaining: this.maxAlphaUsers - users.length,\n      registrationRate: this.getRegistrationRate(users),\n      activeUsers: this.getActiveUsers(users).length\n    };\n  }\n  getRegistrationRate(users) {\n    const last24h = users.filter(user => {\n      const regTime = new Date(user.registeredAt);\n      const now = new Date();\n      return now - regTime < 24 * 60 * 60 * 1000;\n    });\n    return last24h.length;\n  }\n  getActiveUsers(users) {\n    const lastWeek = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n    return users.filter(user => {\n      const lastActive = new Date(user.lastActive);\n      return lastActive > lastWeek;\n    });\n  }\n  hashUserId(userId) {\n    let hash = 0;\n    for (let i = 0; i < userId.length; i++) {\n      const char = userId.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash;\n    }\n    return `user_${Math.abs(hash)}`;\n  }\n\n  // üßπ RESET USER (FOR TESTING)\n  resetCurrentUser() {\n    localStorage.removeItem('current_alpha_user');\n    const result = this.registerNewUser();\n    console.log('üîÑ User reset and re-registered:', result);\n    return result;\n  }\n\n  // üîß DEBUG: Reset scan counter\n  resetScanCounter() {\n    const user = this.getCurrentUser();\n    if (user) {\n      user.totalScans = 0;\n      user.successfulScans = 0;\n      localStorage.setItem('current_alpha_user', JSON.stringify(user));\n      this.updateUserInArray(user);\n      console.log('üîÑ Scan counter reset to 0');\n    }\n    return user;\n  }\n\n  // üëë CHECK IF USER IS ADMIN\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return user && (user.alphaNumber === 1 ||\n    // First alpha tester\n    user.username === 'mightysummoner784' ||\n    // Your specific username\n    user.id === 'admin_override');\n  }\n}\nexport default AlphaUserSystem;","map":{"version":3,"names":["AlphaUserSystem","constructor","maxAlphaUsers","initializeSystem","console","log","localStorage","getItem","setItem","JSON","stringify","registerNewUser","users","getAlphaUsers","length","warn","success","message","userNumber","userId","newUser","id","alphaNumber","username","generateUsername","registeredAt","Date","toISOString","totalScans","successfulScans","lastActive","feedback","collection","preferences","scanMode","notifications","push","user","getCurrentUser","userData","parse","error","recordSuccessfulScan","cardName","confidence","addToCollection","updateUserInArray","existingCard","find","card","name","toLowerCase","count","lastScanned","totalConfidence","avgConfidence","Math","round","now","firstScanned","removeFromCollection","cardId","cardIndex","findIndex","removedCard","splice","updateCardCount","newCount","c","getCollection","sortBy","sort","a","b","localeCompare","userIndex","u","addFeedback","rating","comment","context","timestamp","scanCount","allFeedback","userHash","hashUserId","email","adjectives","mtgTerms","adjective","floor","random","term","number","getAllStats","currentUser","totalUsers","maxUsers","spotsRemaining","registrationRate","getRegistrationRate","activeUsers","getActiveUsers","last24h","filter","regTime","lastWeek","hash","i","char","charCodeAt","abs","resetCurrentUser","removeItem","result","resetScanCounter","isAdmin"],"sources":["C:/Users/kim-a/Documents/DiceyTeck/MTG Scanner/src/AlphaUserSystem.js"],"sourcesContent":["// AlphaUserSystem.js - FIXED: Real Alpha Tester Registration & Collection Management\r\nclass AlphaUserSystem {\r\n    constructor() {\r\n        this.maxAlphaUsers = 500;\r\n        this.initializeSystem();\r\n    }\r\n\r\n    initializeSystem() {\r\n        console.log('üîß AlphaUserSystem initialized');\r\n        \r\n        // Initialize alpha users array if not exists\r\n        if (!localStorage.getItem('alpha_users')) {\r\n            localStorage.setItem('alpha_users', JSON.stringify([]));\r\n        }\r\n        \r\n        // Initialize current user if not exists\r\n        if (!localStorage.getItem('current_alpha_user')) {\r\n            this.registerNewUser();\r\n        }\r\n    }\r\n\r\n    // üéØ REGISTER NEW ALPHA TESTER\r\n    registerNewUser() {\r\n        const users = this.getAlphaUsers();\r\n        \r\n        // Check if we're at capacity\r\n        if (users.length >= this.maxAlphaUsers) {\r\n            console.warn('‚ö†Ô∏è Alpha testing at capacity');\r\n            return {\r\n                success: false,\r\n                message: 'Alpha testing is currently at capacity (500/500 testers)',\r\n                userNumber: null\r\n            };\r\n        }\r\n\r\n        // Generate unique alpha tester number\r\n        const userNumber = users.length + 1;\r\n        const userId = `alpha_${userNumber}`;\r\n        \r\n        // Create new alpha user\r\n        const newUser = {\r\n            id: userId,\r\n            alphaNumber: userNumber,\r\n            username: this.generateUsername(),\r\n            registeredAt: new Date().toISOString(),\r\n            totalScans: 0,\r\n            successfulScans: 0, // NEW: Track only successful scans\r\n            lastActive: new Date().toISOString(),\r\n            feedback: [],\r\n            collection: [],\r\n            preferences: {\r\n                scanMode: 'auto',\r\n                notifications: true\r\n            }\r\n        };\r\n\r\n        // Add to users array\r\n        users.push(newUser);\r\n        localStorage.setItem('alpha_users', JSON.stringify(users));\r\n        \r\n        // Set as current user\r\n        localStorage.setItem('current_alpha_user', JSON.stringify(newUser));\r\n        \r\n        console.log(`üéâ Registered Alpha Tester #${userNumber}: ${newUser.username}`);\r\n        \r\n        return {\r\n            success: true,\r\n            user: newUser,\r\n            userNumber: userNumber,\r\n            message: `Welcome Alpha Tester #${userNumber}!`\r\n        };\r\n    }\r\n\r\n    // üéÆ GET CURRENT USER\r\n    getCurrentUser() {\r\n        const userData = localStorage.getItem('current_alpha_user');\r\n        if (!userData) {\r\n            return this.registerNewUser().user;\r\n        }\r\n        \r\n        try {\r\n            const user = JSON.parse(userData);\r\n            \r\n            // Update last active ONLY (don't trigger scan counter)\r\n            user.lastActive = new Date().toISOString();\r\n            localStorage.setItem('current_alpha_user', JSON.stringify(user));\r\n            \r\n            return user;\r\n        } catch (error) {\r\n            console.error('‚ùå Error loading user data:', error);\r\n            return this.registerNewUser().user;\r\n        }\r\n    }\r\n\r\n    // üéØ FIXED: Update stats ONLY for successful scans\r\n    recordSuccessfulScan(cardName, confidence, scanMode) {\r\n        const user = this.getCurrentUser();\r\n        if (!user || !cardName) {\r\n            console.warn('‚ö†Ô∏è Cannot record scan: invalid user or card name');\r\n            return user;\r\n        }\r\n\r\n        console.log(`üìä Recording successful scan: ${cardName} (${confidence}%)`);\r\n        \r\n        // FIXED: Only increment on actual successful scans\r\n        user.totalScans += 1;\r\n        user.successfulScans += 1;\r\n        user.lastActive = new Date().toISOString();\r\n        \r\n        // Add to collection or update count\r\n        this.addToCollection(user, cardName, confidence, scanMode);\r\n        \r\n        // Update in localStorage\r\n        localStorage.setItem('current_alpha_user', JSON.stringify(user));\r\n        \r\n        // Update in users array\r\n        this.updateUserInArray(user);\r\n\r\n        console.log(`‚úÖ Scan recorded. Total: ${user.totalScans}, Collection: ${user.collection.length} unique cards`);\r\n        \r\n        return user;\r\n    }\r\n\r\n    // üóÉÔ∏è COLLECTION MANAGEMENT\r\n    addToCollection(user, cardName, confidence, scanMode) {\r\n        const existingCard = user.collection.find(card => \r\n            card.name.toLowerCase() === cardName.toLowerCase()\r\n        );\r\n        \r\n        if (existingCard) {\r\n            existingCard.count += 1;\r\n            existingCard.lastScanned = new Date().toISOString();\r\n            existingCard.totalConfidence += confidence;\r\n            existingCard.avgConfidence = Math.round(existingCard.totalConfidence / existingCard.count);\r\n            console.log(`üìà Updated existing card: ${cardName} (now ${existingCard.count}x)`);\r\n        } else {\r\n            user.collection.push({\r\n                id: Date.now(),\r\n                name: cardName,\r\n                count: 1,\r\n                avgConfidence: confidence,\r\n                totalConfidence: confidence,\r\n                scanMode: scanMode,\r\n                firstScanned: new Date().toISOString(),\r\n                lastScanned: new Date().toISOString()\r\n            });\r\n            console.log(`‚ú® Added new card to collection: ${cardName}`);\r\n        }\r\n    }\r\n\r\n    // üóëÔ∏è REMOVE CARD FROM COLLECTION\r\n    removeFromCollection(cardId) {\r\n        const user = this.getCurrentUser();\r\n        if (!user) return null;\r\n\r\n        const cardIndex = user.collection.findIndex(card => card.id === cardId);\r\n        if (cardIndex === -1) {\r\n            console.warn('‚ö†Ô∏è Card not found in collection');\r\n            return user;\r\n        }\r\n\r\n        const removedCard = user.collection[cardIndex];\r\n        user.collection.splice(cardIndex, 1);\r\n        \r\n        // Update localStorage\r\n        localStorage.setItem('current_alpha_user', JSON.stringify(user));\r\n        this.updateUserInArray(user);\r\n        \r\n        console.log(`üóëÔ∏è Removed card from collection: ${removedCard.name}`);\r\n        return user;\r\n    }\r\n\r\n    // üìù UPDATE CARD COUNT\r\n    updateCardCount(cardId, newCount) {\r\n        const user = this.getCurrentUser();\r\n        if (!user) return null;\r\n\r\n        const card = user.collection.find(c => c.id === cardId);\r\n        if (!card) {\r\n            console.warn('‚ö†Ô∏è Card not found in collection');\r\n            return user;\r\n        }\r\n\r\n        if (newCount <= 0) {\r\n            return this.removeFromCollection(cardId);\r\n        }\r\n\r\n        card.count = newCount;\r\n        card.lastScanned = new Date().toISOString();\r\n        \r\n        // Update localStorage\r\n        localStorage.setItem('current_alpha_user', JSON.stringify(user));\r\n        this.updateUserInArray(user);\r\n        \r\n        console.log(`üìù Updated card count: ${card.name} = ${newCount}x`);\r\n        return user;\r\n    }\r\n\r\n    // üîÑ GET COLLECTION WITH SORTING\r\n    getCollection(sortBy = 'lastScanned') {\r\n        const user = this.getCurrentUser();\r\n        if (!user || !user.collection) return [];\r\n\r\n        const collection = [...user.collection];\r\n        \r\n        switch (sortBy) {\r\n            case 'name':\r\n                return collection.sort((a, b) => a.name.localeCompare(b.name));\r\n            case 'count':\r\n                return collection.sort((a, b) => b.count - a.count);\r\n            case 'confidence':\r\n                return collection.sort((a, b) => b.avgConfidence - a.avgConfidence);\r\n            case 'firstScanned':\r\n                return collection.sort((a, b) => new Date(a.firstScanned) - new Date(b.firstScanned));\r\n            case 'lastScanned':\r\n            default:\r\n                return collection.sort((a, b) => new Date(b.lastScanned) - new Date(a.lastScanned));\r\n        }\r\n    }\r\n\r\n    // üîÑ UPDATE USER IN ARRAY\r\n    updateUserInArray(user) {\r\n        const users = this.getAlphaUsers();\r\n        const userIndex = users.findIndex(u => u.id === user.id);\r\n        if (userIndex !== -1) {\r\n            users[userIndex] = user;\r\n            localStorage.setItem('alpha_users', JSON.stringify(users));\r\n        }\r\n    }\r\n\r\n    // üí¨ ADD USER FEEDBACK\r\n    addFeedback(rating, comment, context = {}) {\r\n        const user = this.getCurrentUser();\r\n        if (!user) return;\r\n\r\n        const feedback = {\r\n            id: Date.now(),\r\n            rating: rating,\r\n            comment: comment,\r\n            timestamp: new Date().toISOString(),\r\n            context: context,\r\n            userNumber: user.alphaNumber,\r\n            scanCount: user.totalScans\r\n        };\r\n\r\n        user.feedback.push(feedback);\r\n        localStorage.setItem('current_alpha_user', JSON.stringify(user));\r\n\r\n        // Also save to global feedback array\r\n        const allFeedback = JSON.parse(localStorage.getItem('alpha_feedback') || '[]');\r\n        allFeedback.push({\r\n            ...feedback,\r\n            userHash: this.hashUserId(user.id),\r\n            email: user.email || 'not_provided'\r\n        });\r\n        localStorage.setItem('alpha_feedback', JSON.stringify(allFeedback));\r\n\r\n        console.log(`üí¨ Feedback added: ${rating}/5 stars`);\r\n        return feedback;\r\n    }\r\n\r\n    // üé≤ GENERATE UNIQUE USERNAME\r\n    generateUsername() {\r\n        const adjectives = [\r\n            'swift', 'clever', 'brave', 'wise', 'keen', 'bold', 'quick', 'sharp',\r\n            'bright', 'fierce', 'mighty', 'noble', 'agile', 'crafty', 'steady'\r\n        ];\r\n        \r\n        const mtgTerms = [\r\n            'mage', 'wizard', 'planeswalker', 'scholar', 'seeker', 'guardian',\r\n            'champion', 'explorer', 'mystic', 'artificer', 'summoner', 'spellcaster',\r\n            'wanderer', 'collector', 'strategist'\r\n        ];\r\n\r\n        const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\r\n        const term = mtgTerms[Math.floor(Math.random() * mtgTerms.length)];\r\n        const number = Math.floor(Math.random() * 999) + 1;\r\n\r\n        return `${adjective}${term}${number}`;\r\n    }\r\n\r\n    // üóÉÔ∏è HELPER FUNCTIONS\r\n    getAlphaUsers() {\r\n        try {\r\n            return JSON.parse(localStorage.getItem('alpha_users') || '[]');\r\n        } catch (error) {\r\n            console.error('‚ùå Error loading alpha users:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    getAllStats() {\r\n        const users = this.getAlphaUsers();\r\n        const currentUser = this.getCurrentUser();\r\n        \r\n        return {\r\n            totalUsers: users.length,\r\n            maxUsers: this.maxAlphaUsers,\r\n            currentUser: currentUser,\r\n            spotsRemaining: this.maxAlphaUsers - users.length,\r\n            registrationRate: this.getRegistrationRate(users),\r\n            activeUsers: this.getActiveUsers(users).length\r\n        };\r\n    }\r\n\r\n    getRegistrationRate(users) {\r\n        const last24h = users.filter(user => {\r\n            const regTime = new Date(user.registeredAt);\r\n            const now = new Date();\r\n            return (now - regTime) < 24 * 60 * 60 * 1000;\r\n        });\r\n        return last24h.length;\r\n    }\r\n\r\n    getActiveUsers(users) {\r\n        const lastWeek = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\r\n        return users.filter(user => {\r\n            const lastActive = new Date(user.lastActive);\r\n            return lastActive > lastWeek;\r\n        });\r\n    }\r\n\r\n    hashUserId(userId) {\r\n        let hash = 0;\r\n        for (let i = 0; i < userId.length; i++) {\r\n            const char = userId.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + char;\r\n            hash = hash & hash;\r\n        }\r\n        return `user_${Math.abs(hash)}`;\r\n    }\r\n\r\n    // üßπ RESET USER (FOR TESTING)\r\n    resetCurrentUser() {\r\n        localStorage.removeItem('current_alpha_user');\r\n        const result = this.registerNewUser();\r\n        console.log('üîÑ User reset and re-registered:', result);\r\n        return result;\r\n    }\r\n\r\n    // üîß DEBUG: Reset scan counter\r\n    resetScanCounter() {\r\n        const user = this.getCurrentUser();\r\n        if (user) {\r\n            user.totalScans = 0;\r\n            user.successfulScans = 0;\r\n            localStorage.setItem('current_alpha_user', JSON.stringify(user));\r\n            this.updateUserInArray(user);\r\n            console.log('üîÑ Scan counter reset to 0');\r\n        }\r\n        return user;\r\n    }\r\n\r\n    // üëë CHECK IF USER IS ADMIN\r\n    isAdmin() {\r\n        const user = this.getCurrentUser();\r\n        return user && (\r\n            user.alphaNumber === 1 || // First alpha tester\r\n            user.username === 'mightysummoner784' || // Your specific username\r\n            user.id === 'admin_override'\r\n        );\r\n    }\r\n}\r\n\r\nexport default AlphaUserSystem;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}