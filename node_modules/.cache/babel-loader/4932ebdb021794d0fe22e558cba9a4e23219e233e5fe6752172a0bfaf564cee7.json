{"ast":null,"code":"// SecurityService.js - ADMIN-ONLY ACCESS & DATA PROTECTION\nclass SecurityService {\n  constructor() {\n    this.ADMIN_KEY = 'MTG_SCANNER_ADMIN_2025_SECURE_KEY_ALPHA';\n    this.adminAuthenticated = false;\n    this.securityLog = [];\n    this.initSecurity();\n  }\n  initSecurity() {\n    console.log('üîí SecurityService initialized - Alpha protection active');\n    this.logSecurityEvent('SECURITY_INIT', 'Security service started');\n\n    // Clear any potential admin keys from URL/storage on init\n    this.clearPotentialLeaks();\n  }\n\n  // üîê ADMIN AUTHENTICATION (YOUR EYES ONLY)\n  authenticateAdmin(inputKey) {\n    if (inputKey === this.ADMIN_KEY) {\n      this.adminAuthenticated = true;\n      this.logSecurityEvent('ADMIN_AUTH_SUCCESS', 'Admin authenticated successfully');\n      console.log('üîë Admin access granted');\n      return true;\n    } else {\n      this.logSecurityEvent('ADMIN_AUTH_FAILED', `Failed admin attempt: ${inputKey === null || inputKey === void 0 ? void 0 : inputKey.substring(0, 3)}...`);\n      console.warn('‚ùå Invalid admin key');\n      return false;\n    }\n  }\n\n  // üõ°Ô∏è ADMIN DATA ACCESS (SECURE EXPORT)\n  exportAlphaData() {\n    if (!this.adminAuthenticated) {\n      this.logSecurityEvent('UNAUTHORIZED_DATA_ACCESS', 'Non-admin tried to access data');\n      console.error('‚ùå Unauthorized data access attempt');\n      return null;\n    }\n    try {\n      const alphaData = {\n        // User data (anonymized)\n        users: this.getAnonymizedUsers(),\n        // Usage statistics\n        statistics: this.getUsageStatistics(),\n        // Feedback data\n        feedback: this.getAllFeedback(),\n        // Security log\n        securityEvents: this.securityLog,\n        // Export metadata\n        exportedAt: new Date().toISOString(),\n        exportedBy: 'ADMIN',\n        totalUsers: this.getTotalUsers(),\n        dataIntegrity: this.verifyDataIntegrity()\n      };\n      this.logSecurityEvent('ADMIN_DATA_EXPORT', 'Alpha data exported by admin');\n      return alphaData;\n    } catch (error) {\n      this.logSecurityEvent('DATA_EXPORT_ERROR', `Export failed: ${error.message}`);\n      console.error('‚ùå Data export error:', error);\n      return null;\n    }\n  }\n\n  // üìä ANONYMIZED USER DATA (PRIVACY PROTECTED)\n  getAnonymizedUsers() {\n    const users = JSON.parse(localStorage.getItem('alpha_users') || '[]');\n    return users.map((user, index) => {\n      var _user$collection;\n      return {\n        userId: `user_${index + 1}`,\n        registeredAt: user.registeredAt,\n        totalScans: user.totalScans || 0,\n        collectionSize: ((_user$collection = user.collection) === null || _user$collection === void 0 ? void 0 : _user$collection.length) || 0,\n        lastActive: user.lastActive,\n        // EMAIL HASHED (NEVER PLAIN TEXT)\n        emailHash: this.hashEmail(user.email),\n        isActive: this.isUserActive(user)\n      };\n    });\n  }\n\n  // üîê EMAIL PROTECTION (HASHED, NOT READABLE)\n  hashEmail(email) {\n    if (!email) return 'no_email';\n\n    // Simple hash for privacy (not cryptographic, just obfuscation)\n    let hash = 0;\n    for (let i = 0; i < email.length; i++) {\n      const char = email.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return `hash_${Math.abs(hash)}`;\n  }\n\n  // üìà USAGE STATISTICS (AGGREGATED ONLY)\n  getUsageStatistics() {\n    const users = JSON.parse(localStorage.getItem('alpha_users') || '[]');\n    const feedback = JSON.parse(localStorage.getItem('alpha_feedback') || '[]');\n    return {\n      totalUsers: users.length,\n      maxUsers: 500,\n      registrationRate: this.calculateRegistrationRate(users),\n      avgScansPerUser: this.calculateAvgScans(users),\n      totalFeedbackItems: feedback.length,\n      lastWeekActivity: this.getLastWeekActivity(users),\n      collectionStats: this.getCollectionStatistics(users),\n      scanSuccessRate: this.calculateSuccessRate()\n    };\n  }\n\n  // üí¨ FEEDBACK COLLECTION (ADMIN ACCESS ONLY)\n  getAllFeedback() {\n    if (!this.adminAuthenticated) {\n      return [];\n    }\n    const feedback = JSON.parse(localStorage.getItem('alpha_feedback') || '[]');\n    return feedback.map(item => ({\n      feedbackId: item.id || 'unknown',\n      timestamp: item.timestamp,\n      rating: item.rating,\n      comment: item.comment,\n      userType: item.userType || 'alpha_tester',\n      // USER EMAIL HASHED FOR PRIVACY\n      userHash: this.hashEmail(item.email),\n      scanCount: item.scanCount,\n      sessionLength: item.sessionLength\n    }));\n  }\n\n  // üîç SECURITY EVENT LOGGING\n  logSecurityEvent(eventType, details) {\n    const event = {\n      timestamp: new Date().toISOString(),\n      type: eventType,\n      details: details,\n      sessionId: this.getSessionId()\n    };\n    this.securityLog.push(event);\n\n    // Keep only last 1000 security events\n    if (this.securityLog.length > 1000) {\n      this.securityLog = this.securityLog.slice(-1000);\n    }\n  }\n\n  // üõ°Ô∏è DATA INTEGRITY VERIFICATION\n  verifyDataIntegrity() {\n    try {\n      const users = JSON.parse(localStorage.getItem('alpha_users') || '[]');\n      const feedback = JSON.parse(localStorage.getItem('alpha_feedback') || '[]');\n      return {\n        usersValid: Array.isArray(users),\n        feedbackValid: Array.isArray(feedback),\n        noCorruption: true,\n        lastVerified: new Date().toISOString()\n      };\n    } catch (error) {\n      this.logSecurityEvent('DATA_CORRUPTION', `Data integrity check failed: ${error.message}`);\n      return {\n        usersValid: false,\n        feedbackValid: false,\n        noCorruption: false,\n        error: error.message\n      };\n    }\n  }\n\n  // üßπ SECURITY CLEANUP\n  clearPotentialLeaks() {\n    // Remove any admin keys that might be in URL params\n    if (window.location.search.includes('admin')) {\n      window.history.replaceState({}, document.title, window.location.pathname);\n    }\n\n    // Clear any accidental admin data from localStorage\n    const keysToCheck = Object.keys(localStorage);\n    keysToCheck.forEach(key => {\n      if (key.toLowerCase().includes('admin') && key !== 'alpha_admin_auth') {\n        localStorage.removeItem(key);\n        this.logSecurityEvent('SECURITY_CLEANUP', `Removed potential leak: ${key}`);\n      }\n    });\n  }\n\n  // üì± ADMIN PANEL ACCESS CHECK\n  canAccessAdminPanel() {\n    return this.adminAuthenticated;\n  }\n\n  // üö™ ADMIN LOGOUT\n  logoutAdmin() {\n    this.adminAuthenticated = false;\n    this.logSecurityEvent('ADMIN_LOGOUT', 'Admin logged out');\n    console.log('üö™ Admin logged out');\n  }\n\n  // üîÑ UTILITY FUNCTIONS\n  calculateRegistrationRate(users) {\n    const last24h = users.filter(user => {\n      const regTime = new Date(user.registeredAt);\n      const now = new Date();\n      return now - regTime < 24 * 60 * 60 * 1000;\n    });\n    return last24h.length;\n  }\n  calculateAvgScans(users) {\n    if (users.length === 0) return 0;\n    const totalScans = users.reduce((sum, user) => sum + (user.totalScans || 0), 0);\n    return Math.round(totalScans / users.length);\n  }\n  getLastWeekActivity(users) {\n    const lastWeek = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n    return users.filter(user => {\n      const lastActive = new Date(user.lastActive);\n      return lastActive > lastWeek;\n    }).length;\n  }\n  getCollectionStatistics(users) {\n    const collections = users.filter(user => user.collection && user.collection.length > 0);\n    const totalCards = collections.reduce((sum, user) => sum + user.collection.length, 0);\n    return {\n      usersWithCollections: collections.length,\n      totalCardsInCollections: totalCards,\n      avgCollectionSize: collections.length > 0 ? Math.round(totalCards / collections.length) : 0\n    };\n  }\n  calculateSuccessRate() {\n    // This would be calculated from scan logs\n    return 95; // Placeholder - your actual success rate\n  }\n  isUserActive(user) {\n    const lastActive = new Date(user.lastActive);\n    const now = new Date();\n    return now - lastActive < 7 * 24 * 60 * 60 * 1000; // Active in last 7 days\n  }\n  getSessionId() {\n    let sessionId = sessionStorage.getItem('security_session_id');\n    if (!sessionId) {\n      sessionId = 'sec_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n      sessionStorage.setItem('security_session_id', sessionId);\n    }\n    return sessionId;\n  }\n  getTotalUsers() {\n    const users = JSON.parse(localStorage.getItem('alpha_users') || '[]');\n    return users.length;\n  }\n}\nexport default SecurityService;","map":{"version":3,"names":["SecurityService","constructor","ADMIN_KEY","adminAuthenticated","securityLog","initSecurity","console","log","logSecurityEvent","clearPotentialLeaks","authenticateAdmin","inputKey","substring","warn","exportAlphaData","error","alphaData","users","getAnonymizedUsers","statistics","getUsageStatistics","feedback","getAllFeedback","securityEvents","exportedAt","Date","toISOString","exportedBy","totalUsers","getTotalUsers","dataIntegrity","verifyDataIntegrity","message","JSON","parse","localStorage","getItem","map","user","index","_user$collection","userId","registeredAt","totalScans","collectionSize","collection","length","lastActive","emailHash","hashEmail","email","isActive","isUserActive","hash","i","char","charCodeAt","Math","abs","maxUsers","registrationRate","calculateRegistrationRate","avgScansPerUser","calculateAvgScans","totalFeedbackItems","lastWeekActivity","getLastWeekActivity","collectionStats","getCollectionStatistics","scanSuccessRate","calculateSuccessRate","item","feedbackId","id","timestamp","rating","comment","userType","userHash","scanCount","sessionLength","eventType","details","event","type","sessionId","getSessionId","push","slice","usersValid","Array","isArray","feedbackValid","noCorruption","lastVerified","window","location","search","includes","history","replaceState","document","title","pathname","keysToCheck","Object","keys","forEach","key","toLowerCase","removeItem","canAccessAdminPanel","logoutAdmin","last24h","filter","regTime","now","reduce","sum","round","lastWeek","collections","totalCards","usersWithCollections","totalCardsInCollections","avgCollectionSize","sessionStorage","random","toString","substr","setItem"],"sources":["C:/Users/kim-a/Documents/DiceyTeck/MTG Scanner/src/SecurityService.js"],"sourcesContent":["// SecurityService.js - ADMIN-ONLY ACCESS & DATA PROTECTION\r\nclass SecurityService {\r\n    constructor() {\r\n        this.ADMIN_KEY = 'MTG_SCANNER_ADMIN_2025_SECURE_KEY_ALPHA';\r\n        this.adminAuthenticated = false;\r\n        this.securityLog = [];\r\n        this.initSecurity();\r\n    }\r\n\r\n    initSecurity() {\r\n        console.log('üîí SecurityService initialized - Alpha protection active');\r\n        this.logSecurityEvent('SECURITY_INIT', 'Security service started');\r\n        \r\n        // Clear any potential admin keys from URL/storage on init\r\n        this.clearPotentialLeaks();\r\n    }\r\n\r\n    // üîê ADMIN AUTHENTICATION (YOUR EYES ONLY)\r\n    authenticateAdmin(inputKey) {\r\n        if (inputKey === this.ADMIN_KEY) {\r\n            this.adminAuthenticated = true;\r\n            this.logSecurityEvent('ADMIN_AUTH_SUCCESS', 'Admin authenticated successfully');\r\n            console.log('üîë Admin access granted');\r\n            return true;\r\n        } else {\r\n            this.logSecurityEvent('ADMIN_AUTH_FAILED', `Failed admin attempt: ${inputKey?.substring(0, 3)}...`);\r\n            console.warn('‚ùå Invalid admin key');\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // üõ°Ô∏è ADMIN DATA ACCESS (SECURE EXPORT)\r\n    exportAlphaData() {\r\n        if (!this.adminAuthenticated) {\r\n            this.logSecurityEvent('UNAUTHORIZED_DATA_ACCESS', 'Non-admin tried to access data');\r\n            console.error('‚ùå Unauthorized data access attempt');\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            const alphaData = {\r\n                // User data (anonymized)\r\n                users: this.getAnonymizedUsers(),\r\n                \r\n                // Usage statistics\r\n                statistics: this.getUsageStatistics(),\r\n                \r\n                // Feedback data\r\n                feedback: this.getAllFeedback(),\r\n                \r\n                // Security log\r\n                securityEvents: this.securityLog,\r\n                \r\n                // Export metadata\r\n                exportedAt: new Date().toISOString(),\r\n                exportedBy: 'ADMIN',\r\n                totalUsers: this.getTotalUsers(),\r\n                dataIntegrity: this.verifyDataIntegrity()\r\n            };\r\n\r\n            this.logSecurityEvent('ADMIN_DATA_EXPORT', 'Alpha data exported by admin');\r\n            return alphaData;\r\n        } catch (error) {\r\n            this.logSecurityEvent('DATA_EXPORT_ERROR', `Export failed: ${error.message}`);\r\n            console.error('‚ùå Data export error:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // üìä ANONYMIZED USER DATA (PRIVACY PROTECTED)\r\n    getAnonymizedUsers() {\r\n        const users = JSON.parse(localStorage.getItem('alpha_users') || '[]');\r\n        return users.map((user, index) => ({\r\n            userId: `user_${index + 1}`,\r\n            registeredAt: user.registeredAt,\r\n            totalScans: user.totalScans || 0,\r\n            collectionSize: user.collection?.length || 0,\r\n            lastActive: user.lastActive,\r\n            // EMAIL HASHED (NEVER PLAIN TEXT)\r\n            emailHash: this.hashEmail(user.email),\r\n            isActive: this.isUserActive(user)\r\n        }));\r\n    }\r\n\r\n    // üîê EMAIL PROTECTION (HASHED, NOT READABLE)\r\n    hashEmail(email) {\r\n        if (!email) return 'no_email';\r\n        \r\n        // Simple hash for privacy (not cryptographic, just obfuscation)\r\n        let hash = 0;\r\n        for (let i = 0; i < email.length; i++) {\r\n            const char = email.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + char;\r\n            hash = hash & hash; // Convert to 32-bit integer\r\n        }\r\n        return `hash_${Math.abs(hash)}`;\r\n    }\r\n\r\n    // üìà USAGE STATISTICS (AGGREGATED ONLY)\r\n    getUsageStatistics() {\r\n        const users = JSON.parse(localStorage.getItem('alpha_users') || '[]');\r\n        const feedback = JSON.parse(localStorage.getItem('alpha_feedback') || '[]');\r\n        \r\n        return {\r\n            totalUsers: users.length,\r\n            maxUsers: 500,\r\n            registrationRate: this.calculateRegistrationRate(users),\r\n            avgScansPerUser: this.calculateAvgScans(users),\r\n            totalFeedbackItems: feedback.length,\r\n            lastWeekActivity: this.getLastWeekActivity(users),\r\n            collectionStats: this.getCollectionStatistics(users),\r\n            scanSuccessRate: this.calculateSuccessRate()\r\n        };\r\n    }\r\n\r\n    // üí¨ FEEDBACK COLLECTION (ADMIN ACCESS ONLY)\r\n    getAllFeedback() {\r\n        if (!this.adminAuthenticated) {\r\n            return [];\r\n        }\r\n\r\n        const feedback = JSON.parse(localStorage.getItem('alpha_feedback') || '[]');\r\n        return feedback.map(item => ({\r\n            feedbackId: item.id || 'unknown',\r\n            timestamp: item.timestamp,\r\n            rating: item.rating,\r\n            comment: item.comment,\r\n            userType: item.userType || 'alpha_tester',\r\n            // USER EMAIL HASHED FOR PRIVACY\r\n            userHash: this.hashEmail(item.email),\r\n            scanCount: item.scanCount,\r\n            sessionLength: item.sessionLength\r\n        }));\r\n    }\r\n\r\n    // üîç SECURITY EVENT LOGGING\r\n    logSecurityEvent(eventType, details) {\r\n        const event = {\r\n            timestamp: new Date().toISOString(),\r\n            type: eventType,\r\n            details: details,\r\n            sessionId: this.getSessionId()\r\n        };\r\n        \r\n        this.securityLog.push(event);\r\n        \r\n        // Keep only last 1000 security events\r\n        if (this.securityLog.length > 1000) {\r\n            this.securityLog = this.securityLog.slice(-1000);\r\n        }\r\n    }\r\n\r\n    // üõ°Ô∏è DATA INTEGRITY VERIFICATION\r\n    verifyDataIntegrity() {\r\n        try {\r\n            const users = JSON.parse(localStorage.getItem('alpha_users') || '[]');\r\n            const feedback = JSON.parse(localStorage.getItem('alpha_feedback') || '[]');\r\n            \r\n            return {\r\n                usersValid: Array.isArray(users),\r\n                feedbackValid: Array.isArray(feedback),\r\n                noCorruption: true,\r\n                lastVerified: new Date().toISOString()\r\n            };\r\n        } catch (error) {\r\n            this.logSecurityEvent('DATA_CORRUPTION', `Data integrity check failed: ${error.message}`);\r\n            return {\r\n                usersValid: false,\r\n                feedbackValid: false,\r\n                noCorruption: false,\r\n                error: error.message\r\n            };\r\n        }\r\n    }\r\n\r\n    // üßπ SECURITY CLEANUP\r\n    clearPotentialLeaks() {\r\n        // Remove any admin keys that might be in URL params\r\n        if (window.location.search.includes('admin')) {\r\n            window.history.replaceState({}, document.title, window.location.pathname);\r\n        }\r\n        \r\n        // Clear any accidental admin data from localStorage\r\n        const keysToCheck = Object.keys(localStorage);\r\n        keysToCheck.forEach(key => {\r\n            if (key.toLowerCase().includes('admin') && key !== 'alpha_admin_auth') {\r\n                localStorage.removeItem(key);\r\n                this.logSecurityEvent('SECURITY_CLEANUP', `Removed potential leak: ${key}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    // üì± ADMIN PANEL ACCESS CHECK\r\n    canAccessAdminPanel() {\r\n        return this.adminAuthenticated;\r\n    }\r\n\r\n    // üö™ ADMIN LOGOUT\r\n    logoutAdmin() {\r\n        this.adminAuthenticated = false;\r\n        this.logSecurityEvent('ADMIN_LOGOUT', 'Admin logged out');\r\n        console.log('üö™ Admin logged out');\r\n    }\r\n\r\n    // üîÑ UTILITY FUNCTIONS\r\n    calculateRegistrationRate(users) {\r\n        const last24h = users.filter(user => {\r\n            const regTime = new Date(user.registeredAt);\r\n            const now = new Date();\r\n            return (now - regTime) < 24 * 60 * 60 * 1000;\r\n        });\r\n        return last24h.length;\r\n    }\r\n\r\n    calculateAvgScans(users) {\r\n        if (users.length === 0) return 0;\r\n        const totalScans = users.reduce((sum, user) => sum + (user.totalScans || 0), 0);\r\n        return Math.round(totalScans / users.length);\r\n    }\r\n\r\n    getLastWeekActivity(users) {\r\n        const lastWeek = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\r\n        return users.filter(user => {\r\n            const lastActive = new Date(user.lastActive);\r\n            return lastActive > lastWeek;\r\n        }).length;\r\n    }\r\n\r\n    getCollectionStatistics(users) {\r\n        const collections = users.filter(user => user.collection && user.collection.length > 0);\r\n        const totalCards = collections.reduce((sum, user) => sum + user.collection.length, 0);\r\n        \r\n        return {\r\n            usersWithCollections: collections.length,\r\n            totalCardsInCollections: totalCards,\r\n            avgCollectionSize: collections.length > 0 ? Math.round(totalCards / collections.length) : 0\r\n        };\r\n    }\r\n\r\n    calculateSuccessRate() {\r\n        // This would be calculated from scan logs\r\n        return 95; // Placeholder - your actual success rate\r\n    }\r\n\r\n    isUserActive(user) {\r\n        const lastActive = new Date(user.lastActive);\r\n        const now = new Date();\r\n        return (now - lastActive) < 7 * 24 * 60 * 60 * 1000; // Active in last 7 days\r\n    }\r\n\r\n    getSessionId() {\r\n        let sessionId = sessionStorage.getItem('security_session_id');\r\n        if (!sessionId) {\r\n            sessionId = 'sec_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\r\n            sessionStorage.setItem('security_session_id', sessionId);\r\n        }\r\n        return sessionId;\r\n    }\r\n\r\n    getTotalUsers() {\r\n        const users = JSON.parse(localStorage.getItem('alpha_users') || '[]');\r\n        return users.length;\r\n    }\r\n}\r\n\r\nexport default SecurityService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}